class PaymentError(Exception):
    """Raised when a payment fails."""
    pass

class PaymentProcessor:
    """Very small, fake payment processor stub â€“ always succeeds unless amount==0."""
    def charge(self, user_name: str, dollars: float) -> None:
        if dollars <= 0:
            raise PaymentError("Invalid payment amount.")
        # In a real system youâ€™d integrate Stripe/PayPal/etc. Here we just print.
        print(f"ðŸ’³ Charged ${dollars:.2f} to {user_name}â€™s card.")

def purchase_tokens(user, dollars: int, processor: PaymentProcessor = None) -> None:
    """Convert dollars to tokens 1â€‘forâ€‘1 and credit them to the user."""
    processor = processor or PaymentProcessor()
    try:
        processor.charge(user.name, dollars)
        user.token_manager.add_tokens(dollars)
        print(f"âœ… Added {dollars} tokens to {user.name}â€™s balance.")
    except PaymentError as e:
        print("ðŸš« Payment failed:", e)
